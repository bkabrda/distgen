#!/bin/python

from __future__ import print_function

import sys
import tempfile
import shutil

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from distgen.generator import Generator
from distgen.commands import CommandsConfig

def error(msg):
    print(msg, file=sys.stderr)

def die(msg):
    error(msg)
    sys.exit(1)

description = \
"""
Generate script using predefined metadata about distribution and templates.

As an example of 'dg' usage, to generate _Dockerfile_ for Fedora 21 64-bit
system, you may use command(s):

 $ cd project/directory
 $ dg --spec      docker-data.yaml      \\
      --template  docker.tpl            \\
      --distro    fedora-21-x86_64.yaml
"""

def parse_args():
    parser = ArgumentParser(
        description=description,
        formatter_class=RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        '--projectdir',
        metavar='PROJECTDIR',
        type=str,
        help='Directory with project (defaults to CWD)',
        default="."
    )

    parser.add_argument(
        '--distro',
        metavar='DIST',
        type=str,
        help='Use distribution metadata specified by DIST yaml file',
        default="fedora-21-x86_64.yaml",
    )

    parser.add_argument(
        '--template',
        metavar='TEMPLATE',
        type=str,
        help='Use TEMPLATE file, e.g. docker.tpl or a template string, '
        'e.g. "{{ config.docker.from }}"'
    )

    parser.add_argument(
        '--spec',
        metavar='SPEC',
        type=str,
        help='Use SPEC yaml file to fill the TEMPLATE file',
        action='append',
    )

    parser.add_argument(
        '--output',
        metavar='OUTPUT',
        type=str,
        help='Write result to OUTPUT file instead of stdout',
    )

    parser.add_argument(
        '--macros-from',
        metavar='PROJECTDIR',
        type=str,
        action='append',
        help='Load variables from PROJECTDIR',
    )

    parser.add_argument(
        '--container',
        metavar='CONTAINER_TYPE',
        type=str,
        help='Container type, e.g. \'docker\'',
        default=False,
    )

    parser.add_argument(
        '--macro',
        metavar='MACRO',
        type=str,
        action='append',
        help='Define distgen\'s macro',
    )

    return parser.parse_args()


def main():
    args = parse_args()

    required_opt_fail = False
    for i in ["template"]:
        if not getattr(args, i):
            error("you must specify --" + i)
            required_opt_fail = True

    if required_opt_fail:
        return 1

    temp_filename = False
    output = sys.stdout
    try:
        if args.output:
            _, temp_filename = tempfile.mkstemp(prefix="distgen-")
            output = open(temp_filename, 'w')
    except:
        die("can't create temporary file for '{0}'".format(args.output))


    cmd_cfg = CommandsConfig()
    cmd_cfg.container = args.container

    explicit_macros = {}
    if args.macro:
        for i in args.macro:
            key, value = i.split(' ', 1)
            explicit_macros[key] = value

    if args.template == '-':
        args.template = "/proc/self/fd/0"

    generator = Generator()
    generator.load_project(args.projectdir)
    generator.render(
        args.spec,
        args.template,
        args.distro,
        cmd_cfg,
        output,
        args.macros_from,
        explicit_macros,
    )

    if temp_filename:
        try:
            output.close()
            shutil.move(temp_filename, args.output)
        except:
            die("can't move '{0}' into '{1}'".format(temp_filename, args.output))


if __name__ == "__main__":
    main()
